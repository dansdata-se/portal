CREATE TABLE "profiles"."venues" (
  "id" uuid NOT NULL DEFAULT NULL, -- Generated by trigger
  "parent_id" uuid,
  "name" text NOT NULL CHECK (is_strlen (name, 1, 50) AND is_singleline (name)),
  "geog" GEOGRAPHY (point) NOT NULL
);

COMMENT ON COLUMN "profiles"."venues"."id" IS 'Corresponds to "profiles"."profiles". Automatically generated on insertion';

ALTER TABLE "profiles"."venues" ENABLE ROW LEVEL SECURITY;

CREATE UNIQUE INDEX venues_pkey ON profiles.venues USING btree (id);

ALTER TABLE "profiles"."venues"
  ADD CONSTRAINT "venues_pkey" PRIMARY KEY USING INDEX "venues_pkey";

CREATE INDEX venues_geog_gix ON profiles.venues USING GIST (geog);

ALTER TABLE "profiles"."venues"
  ADD CONSTRAINT "profile_venues_id_fkey" FOREIGN KEY (id) REFERENCES profiles.profiles (id) ON DELETE CASCADE NOT valid;

ALTER TABLE "profiles"."venues" validate CONSTRAINT "profile_venues_id_fkey";

ALTER TABLE "profiles"."venues"
  ADD CONSTRAINT "venues_parent_id_fkey" FOREIGN KEY (parent_id) REFERENCES profiles.venues (id) ON DELETE SET NULL NOT valid;

ALTER TABLE "profiles"."venues" validate CONSTRAINT "venues_parent_id_fkey";

CREATE TRIGGER "profiles_venues_create_trigger"
  BEFORE INSERT ON "profiles"."venues"
  FOR EACH ROW
  EXECUTE PROCEDURE "profiles"."create_associated_profile" ();

CREATE TRIGGER "profiles_venues_delete_associated_profile_trigger"
  AFTER DELETE ON "profiles"."venues"
  FOR EACH ROW
  EXECUTE PROCEDURE "profiles"."delete_associated_profile" ();

