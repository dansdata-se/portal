-- This script was generated by the Schema Diff utility in pgAdmin 4
-- For the circular dependencies, the order in which Schema Diff writes the objects is not very sophisticated
-- and may require manual changes to the script to ensure changes are applied in the correct order.
-- Please report an issue for any failure with the reproduction steps.
CREATE TABLE IF NOT EXISTS internal.profiles (
  id uuid NOT NULL DEFAULT gen_random_uuid (),
  created_at timestamp with time zone NOT NULL DEFAULT (now() AT TIME ZONE 'utc'::text),
  updated_at timestamp with time zone NOT NULL DEFAULT (now() AT TIME ZONE 'utc'::text),
  CONSTRAINT profiles_pkey PRIMARY KEY (id)
)
TABLESPACE pg_default;

ALTER TABLE IF EXISTS internal.profiles OWNER TO postgres;

ALTER TABLE IF EXISTS internal.profiles ENABLE ROW LEVEL SECURITY;

COMMENT ON TABLE internal.profiles IS 'The basic unit of "person, organization, or object" data.

Profiles are related to events, e.g. as organizers, venues, performers, etc. but are not events themselves.

A profile may be owned by multiple users but does not directly represent individual users.';

CREATE TRIGGER internal_profiles_moddatetime
  BEFORE UPDATE ON internal.profiles
  FOR EACH ROW
  EXECUTE FUNCTION extensions.moddatetime ('updated_at');

CREATE TABLE IF NOT EXISTS internal.profile_translations (
  id bigserial,
  profile_id uuid NOT NULL,
  language_code text COLLATE pg_catalog."default" NOT NULL,
  title text COLLATE pg_catalog."default" NOT NULL,
  description text COLLATE pg_catalog."default" NOT NULL DEFAULT ''::text,
  updated_at timestamp with time zone NOT NULL DEFAULT (now() AT TIME ZONE 'utc'::text),
  CONSTRAINT profile_translations_pkey PRIMARY KEY (id),
  CONSTRAINT profile_translations_profile_id_language_code_key UNIQUE (profile_id, language_code),
  CONSTRAINT profile_translations_language_code_fkey FOREIGN KEY (language_code) REFERENCES internal.languages (code) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE RESTRICT,
  CONSTRAINT profile_translations_profile_id_fkey FOREIGN KEY (profile_id) REFERENCES internal.profiles (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE CASCADE
)
TABLESPACE pg_default;

ALTER TABLE IF EXISTS internal.profile_translations OWNER TO postgres;

ALTER TABLE IF EXISTS internal.profile_translations ENABLE ROW LEVEL SECURITY;

COMMENT ON TABLE internal.profile_translations IS 'Translated texts relating to a given profile';

CREATE INDEX IF NOT EXISTS profile_translations_title_gin_idx ON internal.profile_translations USING GIN (title extensions.gin_trgm_ops);

CREATE TRIGGER internal_profile_translations_moddatetime
  BEFORE UPDATE ON internal.profile_translations
  FOR EACH ROW
  EXECUTE FUNCTION extensions.moddatetime ('updated_at');

CREATE TABLE IF NOT EXISTS internal.profile_owners (
  id bigserial,
  user_id uuid NOT NULL,
  profile_id uuid NOT NULL,
  created_by uuid DEFAULT auth.uid () CHECK (user_id <> created_by),
  created_at timestamp with time zone NOT NULL DEFAULT (now() AT TIME ZONE 'utc'::text),
  CONSTRAINT profile_owners_pkey PRIMARY KEY (id),
  CONSTRAINT profile_owners_user_id_profile_id_key UNIQUE (user_id, profile_id),
  CONSTRAINT profile_owners_created_by_fkey FOREIGN KEY (created_by) REFERENCES auth.users (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE SET NULL,
  CONSTRAINT profile_owners_profile_id_fkey FOREIGN KEY (profile_id) REFERENCES internal.profiles (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE CASCADE,
  CONSTRAINT profile_owners_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users (id) MATCH SIMPLE ON UPDATE NO ACTION ON DELETE CASCADE
)
TABLESPACE pg_default;

ALTER TABLE IF EXISTS internal.profile_owners OWNER TO postgres;

ALTER TABLE IF EXISTS internal.profile_owners ENABLE ROW LEVEL SECURITY;

COMMENT ON TABLE internal.profile_owners IS 'Determines which users may edit and control what profiles';

COMMENT ON COLUMN internal.profile_owners.created_by IS 'Id of the user who added `user_id` to the given profile. Mainly intended for diagnostic purposes';

